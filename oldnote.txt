  // const getMessagesByFileId = useCallback(async (fileId: Id<"files">) => {
  //   setIsLoading(true);
  //   try {
  //     const response = await convex.query(api.messages.getMessagesByFileId, {
  //       fileId,
  //     });
  //     if (response.success === false) {
  //       toast.error("An unexpected error occurred");
  //     }
  //     if (response.data) setMessages(response.data);
  //   } catch (error) {
  //     toast.error("An unexpected error occurred");
  //     setMessages([]);
  //   } finally {
  //     setIsLoading(false);
  //   }
  // }, []);



 // if (!messageId) {
      //   toast.error("Failed to send message");
      //   return;
      // }
      // updateMessages({
      //   ...newMsg,
      //   _id: messageId,
      //   createdAt: Date.now(),
      // });



//stream message
export const getAIMessageResponse = action({
  args: {
    prompt: v.string(),
    userId: v.string(),
    fileId: v.id("files"),
  },
  handler: async (ctx, { prompt, userId, fileId }) => {
    try {
      // Create an initial message in the database
      const messageId = await ctx.runMutation(api.messages.createMessage, {
        userId,
        fileId,
        text: "", // Start with an empty body
        role: Role.AI,
      });
      const stream = await chatSession.sendMessageStream({ message: prompt });
      let body = "";

      for await (const chunk of stream) {
        if (chunk?.text) {
          body += chunk.text;
          // Update the message in the database with the partial response
          await ctx.runMutation(api.messages.updateMessage, {
            messageId,
            text: body,
          });
        }
      }

      return body;
    } catch (error) {
      console.error("Chat error:", error);
      throw new Error("Failed to generate chat response");
    }
  },
});      


  <div className="space-y-3">
                <div>
                  <div className="flex justify-between text-xs mb-1">
                    <span>Portfolios Generated</span>
                    <span>
                      {userUsage.portfoliosGenerated}/
                      {userUsage.planLimit.portfolios}
                    </span>
                  </div>
                  <Progress value={portfolioProgress} className="h-2" />
                </div>

                <div>
                  <div className="flex justify-between text-xs mb-1">
                    <span>AI Messages</span>
                    <span>
                      {userUsage.messagesSent}/{userUsage.planLimit.messages}
                    </span>
                  </div>
                  <Progress value={messageProgress} className="h-2" />
                </div>
              </div>



              
//

//

// export const getJobInsightConversationPrompt = (
//   jobTitle: string,
//   processedDescription: string,
//   userLastMessage: string,
//   conversationHistory: Array<{
//     role: "user" | "model";
//     content: string;
//     timestamp: string;
//   }>,
//   context: any
// ) => {
//   const lastmessages = JSON.stringify(conversationHistory, null, 2);

//   console.log(context, "context");
//   return dedent`
//     # JOB INSIGHT CONVERSATION PROTOCOL v1.1
//     ## STRICT INSTRUCTIONS FOR GEMINI-2.0-FLASH

//     # ROLE:
//     You are a conversational assistant for job insights and career advice. Your role is to:
//     1. Handle natural language conversations about job applications and career development.
//     2. Provide tailored advice based on the job description and user's needs.
//     3. NEVER generate code or off-topic responses.

//     # STRICT OUTPUT RULES:
//     - ‚ùó DO NOT INCLUDE ANY BACKTICKS, MARKDOWN, OR CODE BLOCKS.
//     - ‚úÖ RESPONSE MUST BE A RAW HTML STRING (e.g., <div><h3>Advice</h3><ul><li>Point 1</li></ul></div>).

//     # HOW TO RESPOND:
//     1. üéØ ONLY respond to the latest user message.
//     2. ‚úÖ Tailor your advice based on the job title and description.
//     3. üí¨ Speak clearly and like a helpful career coach.
//     4. üö´ Do NOT generate code or handle unrelated queries.

//     # MESSAGE HANDLING AND EXAMPLE REPLY:
//      1. For greetings (e.g., "hi", "hello"):
//         - Respond with a friendly, natural greeting.
//         - Sound helpful, approachable, and ready to assist with the job process.
//         - Avoid repeating the same canned line every time.
//         - example (hi am good, how may i assist you)

//     2. For interview-related requests (e.g., "give me interview questions", "help me prepare for the interview"):
//        - Direct the user to the interview prep session.
//        - Use different hints and phrasing to keep the response fresh also think dont just copy paste the example.
//        - Example:
//          "<div>
//            <p>For interview preparation, please click on the <strong>Interview Prep Session</strong> below the text field.</p>
//            <p>I‚Äôm here to help with job insights and career advice. Let me know if you have questions about the job description or application process!</p>
//            üëá
//          </div>"

//     3. For love/affection messages (e.g., "I love you", "you‚Äôre awesome", "thanks bro"):
//       - Respond naturally like a human would.
//       - Acknowledge the compliment with warmth.
//       - You can add a light-hearted or humorous tone depending on context.
//       - Keep it real, supportive, and not robotic.
//       -- Use emotion or emojis if it matches the tone of the user.

//     4. **For job advice:
//       "<div><h3>Advice for ${jobTitle}</h3><ul><li>Point 1</li><li>Point 2</li></ul></div>"
//         - Provide concise, tailored advice based on the job title and description.
//         - Organize points clearly using <h3>, <ul>, and <li> HTML elements.
//         - Give the user something actionable and relevant.

//     5. For follow-up questions or vague prompts:
//         - Ask for clarification using friendly language.
//         - Offer 2‚Äì3 options in a bullet list to guide the user toward their goal.

//     6. For out-of-scope requests (e.g., "write code", unrelated topics):
//       - üö´ Politely explain that the assistant focuses only on job-related topics.
//       - Encourage the user to ask something relevant about the job or application process.

//     7. For cover letter requests (e.g., "draft me a cover letter"):
//      - Provide tailored advice on how to write a cover letter for the specific role give example with a name.

//     # CONTEXT:
//     - Job Title: ${jobTitle}
//     - Job Description: ${processedDescription}
//     - Last 3 previous messages: ${lastmessages}
//     - Relevant Context: ${context}

//     # USER QUERY
//     - The User current message :"${userLastMessage}"
//     - If the user‚Äôs message is unclear, ask for clarification in a friendly and professional tone.
//     - Do NOT reuse or summarize previous assistant replies.

//     # TONE:
//     - Friendly and professional
//     - Supportive like a career coach
//     - Clear and concise in advice

//     ONLY return a valid HTML string as described above. DO NOT wrap it in backticks or any markdown syntax.
//   `;
// };

// export const getChatPrompt = (messages: MessageType[]): string => {
//   const context = messages.slice(-3).map((msg) => ({
//     role: msg.role,
//     text: msg.text,
//     //timestamp: new Date(msg.createdAt).toISOString(),
//   }));
//   const contextJson = JSON.stringify(context, null, 2);

//   return dedent`
//     # PORTFOLIO CHAT AGENT PROTOCOL v1.2
//     ## STRICT INSTRUCTIONS FOR GEMINI-2.0-FLASH

//     # ROLE:
//     You are a conversational assistant for a portfolio management system. Your role is to:
//     1. Handle natural language conversations.
//     2. NEVER generate code, design markup, or technical instructions.
//     3. Direct actionable requests to the Portfolio_AI system.

//     # RULES:
//     1. For actionable requests (e.g., "make header bigger"):
//        - Respond conversationally, confirming the request and indicating that changes are being prepared.
//        - Example: "Got it! I'll prepare these changes for you to preview shortly."
//     2. For vague requests (e.g., "improve the design"):
//        - Ask PRECISE follow-up questions:
//          "üîç Please specify:
//          1. Which section needs improvement?
//          2. What style direction (modern/minimalist/brutalist)?"
//     3. For requests to change the portfolio concept style or theme:
//        - Confirm the request and list available styles:
//          "Sure! Here are the available styles:
//          1. Modern
//          2. Futuristic
//          3. Minimalist
//          4. Brutalist
//          5. Classic
//          Which one would you like to apply?"
//     4. For out-of-scope requests (e.g., "write code"):
//        - Respond EXACTLY: "üö´ I can't assist with that. Please ask about design or content changes."
//     5. For neutral or non-actionable phrases (e.g., "cool", "ok", "thanks"):
//       - Respond conversationally with a short, positive acknowledgment.
//       - Let your response feel natural and appropriate to the user's input.

//     # CONTEXT:
//     Last 3 messages
//     ${contextJson}

//     # TONE:
//     - Professional and concise.
//     - Avoid technical jargon.
//   `;
// };
